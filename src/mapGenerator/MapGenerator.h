// Copyright (c) 2005 - 2015 Settlers Freaks (sf-team at siedler25.org)
//
// This file is part of Return To The Roots.
//
// Return To The Roots is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Return To The Roots is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Return To The Roots. If not, see <http://www.gnu.org/licenses/>.

#ifndef MapGenerator_h__
#define MapGenerator_h__

#pragma once

#include <string>
#include "mapGenerator/Datatypes.h"

// The MapGenerator is a utility to generate a large variaty of different worlds (empty, random, ...).
class MapGenerator
{
    
public:

    // Create a new instance of MapGenerator.
    // @param players number of players placed on maps generated by the new MapGenerator
    // @param width width of maps generated by the new MapGenerator
    // @param height height of maps generated by the new MapGenerator
    // @param type map type used to generate new maps with the new MapGenerator
    MapGenerator(int players, int width, int height, int type);
    
    // Releases this instance and all resources allocated by this MapGenerator.
    virtual ~MapGenerator();
    
    // Create and saves a new map.
    // @param filePath path for the ouput file
    virtual void Create(const std::string& filePath);
    
private:
    
    int _players;   // number of players to place on the map
    int _width;     // width of the map to generate
    int _height;    // height of the map to generate
    int _type;      // map type used for map generation
    
    // Create a new, empty map with the specified base texture.
    // @param texture type of texture to use for the map generation
    // @return a new map entirely covered by the specified texture
    mgMap* CreateEmptyMap(int texture);
};

#endif // MapGenerator_h__
